universeFile = "blast2go_go_table_edit.txt"
# load topGO
library("topGO")
# read in the 'gene universe' file
geneID2GO <- readMappings(file = universeFile)
geneUniverse <- names(geneID2GO)
# read in the genes of interest
genesOfInterest <- read.table(interestingGenesFile,header=FALSE)
genesOfInterest <- as.character(genesOfInterest$V1)
geneList <- factor(as.integer(geneUniverse %in% genesOfInterest))
names(geneList) <- geneUniverse
# build the GOdata object in topGO
myGOdata <- new("topGOdata", description="My project", ontology="BP", allGenes=geneList,  annot = annFUN.gene2GO, gene2GO = geneID2GO)
myGOdata
# run the Fisher's exact tests
resultClassic <- runTest(myGOdata, algorithm="classic", statistic="fisher")
resultWeight <- runTest(myGOdata, algorithm="weight", statistic="fisher")
resultElim <- runTest(myGOdata, algorithm="elim", statistic="fisher")
resultTopgo <- runTest(myGOdata, algorithm="weight01", statistic="fisher")
resultParentchild <- runTest(myGOdata, algorithm="parentchild", statistic="fisher")
# see how many results we get where weight01 gives a P-value <= 0.001:
mysummary <- summary(attributes(resultTopgo)$score <= 0.001)
numsignif <- as.integer(mysummary[[3]]) # how many terms is it true that P <= 0.001
# print out the top 'numsignif' results:
allRes <- GenTable(myGOdata, weightFisher = resultWeight, elimFisher = resultElim, topgoFisher = resultTopgo, parentchildFisher = resultParentchild, orderBy = "topgoFisher", ranksOf = "weightFisher", topNodes = 220)
allRes
# print a graph (to a pdf file) with the top 'numsignif' results:
output_file2 = paste(output_file,"Topgo", sep="_")
printGraph(myGOdata, resultTopgo, firstSigNodes = numsignif, fn.prefix = output_file2, useInfo = "all", pdfSW = TRUE)
allRes <- GenTable(myGOdata, classicFisher = resultClassic, elimFisher = resultElim, topgoFisher = resultTopgo, parentchildFisher = resultParentchild, orderBy = "topgoFisher", ranksOf = "classicFisher", topNodes = numsignif)
allRes
# print out the genes that are annotated with the significantly enriched GO terms:
myterms <- allRes$GO.ID
mygenes <- genesInTerm(myGOdata, myterms)
for (i in 1:length(myterms))
{
myterm <- myterms[i]
mygenesforterm <- mygenes[myterm][[1]]
myfactor <- mygenesforterm %in% genesOfInterest # find the genes that are in the list of genes of interest
mygenesforterm2 <- mygenesforterm[myfactor == TRUE]
mygenesforterm2 <- paste(mygenesforterm2, collapse=',')
print(paste("Term",myterm,"genes:",mygenesforterm2))
}
sg <- sigGenes(myGOdata)
str(sg)
numSigGenes(myGOdata)
#allRes <- GenTable(myGOdata, weightFisher = resultWeight, orderBy = "resultWeight", ranksOf = "weightFisher", topNodes = 220)
#allRes
#allRes <- GenTable(myGOdata, elimFisher = resultElim, orderBy = "resultElim", ranksOf = "elimFisher", topNodes = 220)
#allRes
#allRes <- GenTable(myGOdata, topgoFisher = resultTopgo, orderBy = "resultTopgo", ranksOf = "topgoFisher", topNodes = 220)
#allRes
#allRes <- GenTable(myGOdata, parentchildFisher = resultParentchild, orderBy = "resultParentchild", ranksOf = "parentchildFisher", topNodes = 220)
#allRes
resultWeight
resultElim
resultTopgo
resultParentchild
allRes <- GenTable(myGOdata, weightFisher = resultWeight, classicFisher = resultClassic, elimFisher = resultElim, topgoFisher = resultTopgo, parentchildFisher = resultParentchild, orderBy = "topgoFisher", ranksOf = "classicFisher", topNodes = 220)
allRes
# close the output file
sink()
#args <- commandArgs(trailingOnly = TRUE)
universeFile = "blast2go_go_table_edit.txt"
interestingGenesFile = "top1percent_edit.txt"
output_file = "my_BP_output_file"
# set the output file
sink(output_file.txt)
# load topGO
library("topGO")
# read in the 'gene universe' file
geneID2GO <- readMappings(file = universeFile)
geneUniverse <- names(geneID2GO)
# read in the genes of interest
genesOfInterest <- read.table(interestingGenesFile,header=FALSE)
genesOfInterest <- as.character(genesOfInterest$V1)
geneList <- factor(as.integer(geneUniverse %in% genesOfInterest))
names(geneList) <- geneUniverse
# build the GOdata object in topGO
myGOdata <- new("topGOdata", description="My project", ontology="BP", allGenes=geneList,  annot = annFUN.gene2GO, gene2GO = geneID2GO)
myGOdata
# run the Fisher's exact tests
resultClassic <- runTest(myGOdata, algorithm="classic", statistic="fisher")
resultWeight <- runTest(myGOdata, algorithm="weight", statistic="fisher")
resultElim <- runTest(myGOdata, algorithm="elim", statistic="fisher")
resultTopgo <- runTest(myGOdata, algorithm="weight01", statistic="fisher")
resultParentchild <- runTest(myGOdata, algorithm="parentchild", statistic="fisher")
# see how many results we get where weight01 gives a P-value <= 0.001:
mysummary <- summary(attributes(resultTopgo)$score <= 0.001)
numsignif <- as.integer(mysummary[[3]]) # how many terms is it true that P <= 0.001
# print out the top 'numsignif' results:
allRes <- GenTable(myGOdata, weightFisher = resultWeight, elimFisher = resultElim, topgoFisher = resultTopgo, parentchildFisher = resultParentchild, orderBy = "topgoFisher", ranksOf = "weightFisher", topNodes = 220)
allRes
# print a graph (to a pdf file) with the top 'numsignif' results:
output_file2 = paste(output_file,"Topgo", sep="_")
printGraph(myGOdata, resultTopgo, firstSigNodes = numsignif, fn.prefix = output_file2, useInfo = "all", pdfSW = TRUE)
allRes <- GenTable(myGOdata, classicFisher = resultClassic, elimFisher = resultElim, topgoFisher = resultTopgo, parentchildFisher = resultParentchild, orderBy = "topgoFisher", ranksOf = "classicFisher", topNodes = numsignif)
allRes
# print out the genes that are annotated with the significantly enriched GO terms:
myterms <- allRes$GO.ID
mygenes <- genesInTerm(myGOdata, myterms)
for (i in 1:length(myterms))
{
myterm <- myterms[i]
mygenesforterm <- mygenes[myterm][[1]]
myfactor <- mygenesforterm %in% genesOfInterest # find the genes that are in the list of genes of interest
mygenesforterm2 <- mygenesforterm[myfactor == TRUE]
mygenesforterm2 <- paste(mygenesforterm2, collapse=',')
print(paste("Term",myterm,"genes:",mygenesforterm2))
}
sg <- sigGenes(myGOdata)
str(sg)
numSigGenes(myGOdata)
#allRes <- GenTable(myGOdata, weightFisher = resultWeight, orderBy = "resultWeight", ranksOf = "weightFisher", topNodes = 220)
#allRes
#allRes <- GenTable(myGOdata, elimFisher = resultElim, orderBy = "resultElim", ranksOf = "elimFisher", topNodes = 220)
#allRes
#allRes <- GenTable(myGOdata, topgoFisher = resultTopgo, orderBy = "resultTopgo", ranksOf = "topgoFisher", topNodes = 220)
#allRes
#allRes <- GenTable(myGOdata, parentchildFisher = resultParentchild, orderBy = "resultParentchild", ranksOf = "parentchildFisher", topNodes = 220)
#allRes
resultWeight
resultElim
resultTopgo
resultParentchild
allRes <- GenTable(myGOdata, weightFisher = resultWeight, classicFisher = resultClassic, elimFisher = resultElim, topgoFisher = resultTopgo, parentchildFisher = resultParentchild, orderBy = "topgoFisher", ranksOf = "classicFisher", topNodes = 220)
allRes
# close the output file
sink()
#args <- commandArgs(trailingOnly = TRUE)
universeFile = "blast2go_go_table_edit.txt"
interestingGenesFile = "top1percent_edit.txt"
output_file = "my_CC_output_file"
# set the output file
sink(output_file.txt)
# load topGO
library("topGO")
# read in the 'gene universe' file
geneID2GO <- readMappings(file = universeFile)
geneUniverse <- names(geneID2GO)
# read in the genes of interest
genesOfInterest <- read.table(interestingGenesFile,header=FALSE)
genesOfInterest <- as.character(genesOfInterest$V1)
geneList <- factor(as.integer(geneUniverse %in% genesOfInterest))
names(geneList) <- geneUniverse
# build the GOdata object in topGO
myGOdata <- new("topGOdata", description="My project", ontology="CC", allGenes=geneList,  annot = annFUN.gene2GO, gene2GO = geneID2GO)
myGOdata
# run the Fisher's exact tests
resultClassic <- runTest(myGOdata, algorithm="classic", statistic="fisher")
resultWeight <- runTest(myGOdata, algorithm="weight", statistic="fisher")
resultElim <- runTest(myGOdata, algorithm="elim", statistic="fisher")
resultTopgo <- runTest(myGOdata, algorithm="weight01", statistic="fisher")
resultParentchild <- runTest(myGOdata, algorithm="parentchild", statistic="fisher")
# see how many results we get where weight01 gives a P-value <= 0.001:
mysummary <- summary(attributes(resultTopgo)$score <= 0.001)
numsignif <- as.integer(mysummary[[3]]) # how many terms is it true that P <= 0.001
# print out the top 'numsignif' results:
allRes <- GenTable(myGOdata, weightFisher = resultWeight, elimFisher = resultElim, topgoFisher = resultTopgo, parentchildFisher = resultParentchild, orderBy = "topgoFisher", ranksOf = "weightFisher", topNodes = 132)
allRes
# print a graph (to a pdf file) with the top 'numsignif' results:
output_file2 = paste(output_file,"Topgo", sep="_")
printGraph(myGOdata, resultTopgo, firstSigNodes = numsignif, fn.prefix = output_file2, useInfo = "all", pdfSW = TRUE)
# print out the genes that are annotated with the significantly enriched GO terms:
myterms <- allRes$GO.ID
mygenes <- genesInTerm(myGOdata, myterms)
for (i in 1:length(myterms))
{
myterm <- myterms[i]
mygenesforterm <- mygenes[myterm][[1]]
myfactor <- mygenesforterm %in% genesOfInterest # find the genes that are in the list of genes of interest
mygenesforterm2 <- mygenesforterm[myfactor == TRUE]
mygenesforterm2 <- paste(mygenesforterm2, collapse=',')
print(paste("Term",myterm,"genes:",mygenesforterm2))
}
sg <- sigGenes(myGOdata)
str(sg)
numSigGenes(myGOdata)
#allRes <- GenTable(myGOdata, weightFisher = resultWeight, orderBy = "resultWeight", ranksOf = "weightFisher", topNodes = 132)
#allRes
#allRes <- GenTable(myGOdata, elimFisher = resultElim, orderBy = "resultElim", ranksOf = "elimFisher", topNodes = 132)
#allRes
#allRes <- GenTable(myGOdata, topgoFisher = resultTopgo, orderBy = "resultTopgo", ranksOf = "topgoFisher", topNodes = 132)
#allRes
#allRes <- GenTable(myGOdata, parentchildFisher = resultParentchild, orderBy = "resultParentchild", ranksOf = "parentchildFisher", topNodes = 132)
#allRes
resultWeight
resultElim
resultTopgo
resultParentchild
# close the output file
sink()
# read in the 'gene universe' file
geneID2GO <- readMappings(file = universeFile)
geneUniverse <- names(geneID2GO)
# read in the genes of interest
genesOfInterest <- read.table(interestingGenesFile,header=FALSE)
genesOfInterest <- as.character(genesOfInterest$V1)
geneList <- factor(as.integer(geneUniverse %in% genesOfInterest))
names(geneList) <- geneUniverse
# build the GOdata object in topGO
myGOdata <- new("topGOdata", description="My project", ontology="CC", allGenes=geneList,  annot = annFUN.gene2GO, gene2GO = geneID2GO)
myGOdata
# run the Fisher's exact tests
resultClassic <- runTest(myGOdata, algorithm="classic", statistic="fisher")
resultWeight <- runTest(myGOdata, algorithm="weight", statistic="fisher")
resultElim <- runTest(myGOdata, algorithm="elim", statistic="fisher")
resultTopgo <- runTest(myGOdata, algorithm="weight01", statistic="fisher")
resultParentchild <- runTest(myGOdata, algorithm="parentchild", statistic="fisher")
# see how many results we get where weight01 gives a P-value <= 0.001:
mysummary <- summary(attributes(resultTopgo)$score <= 0.001)
numsignif <- as.integer(mysummary[[3]]) # how many terms is it true that P <= 0.001
# print out the top 'numsignif' results:
allRes <- GenTable(myGOdata, weightFisher = resultWeight, elimFisher = resultElim, topgoFisher = resultTopgo, parentchildFisher = resultParentchild, orderBy = "topgoFisher", ranksOf = "weightFisher", topNodes = 132)
allRes
# print a graph (to a pdf file) with the top 'numsignif' results:
output_file2 = paste(output_file,"Topgo", sep="_")
printGraph(myGOdata, resultTopgo, firstSigNodes = numsignif, fn.prefix = output_file2, useInfo = "all", pdfSW = TRUE)
# print out the genes that are annotated with the significantly enriched GO terms:
myterms <- allRes$GO.ID
mygenes <- genesInTerm(myGOdata, myterms)
for (i in 1:length(myterms))
{
myterm <- myterms[i]
mygenesforterm <- mygenes[myterm][[1]]
myfactor <- mygenesforterm %in% genesOfInterest # find the genes that are in the list of genes of interest
mygenesforterm2 <- mygenesforterm[myfactor == TRUE]
mygenesforterm2 <- paste(mygenesforterm2, collapse=',')
print(paste("Term",myterm,"genes:",mygenesforterm2))
}
sg <- sigGenes(myGOdata)
str(sg)
numSigGenes(myGOdata)
#allRes <- GenTable(myGOdata, weightFisher = resultWeight, orderBy = "resultWeight", ranksOf = "weightFisher", topNodes = 132)
#allRes
#allRes <- GenTable(myGOdata, elimFisher = resultElim, orderBy = "resultElim", ranksOf = "elimFisher", topNodes = 132)
#allRes
#allRes <- GenTable(myGOdata, topgoFisher = resultTopgo, orderBy = "resultTopgo", ranksOf = "topgoFisher", topNodes = 132)
#allRes
#allRes <- GenTable(myGOdata, parentchildFisher = resultParentchild, orderBy = "resultParentchild", ranksOf = "parentchildFisher", topNodes = 132)
#allRes
resultWeight
resultElim
resultTopgo
resultParentchild
#args <- commandArgs(trailingOnly = TRUE)
universeFile = "blast2go_go_table_edit.txt"
interestingGenesFile = "top1percent_edit.txt"
output_file = "my_CC_output_file"
# load topGO
library("topGO")
# read in the 'gene universe' file
geneID2GO <- readMappings(file = universeFile)
geneUniverse <- names(geneID2GO)
source("http://bioconductor.org/biocLite.R")
biocLite()
#args <- commandArgs(trailingOnly = TRUE)
universeFile = "blast2go_go_table_edit.txt"
interestingGenesFile = "top1percent_edit.txt"
output_file = "my_MF_output_file"
# load topGO
library("topGO")
# read in the 'gene universe' file
geneID2GO <- readMappings(file = universeFile)
geneUniverse <- names(geneID2GO)
source("http://bioconductor.org/biocLite.R")
biocLite()
source("http://bioconductor.org/biocLite.R")
biocLite()
#args <- commandArgs(trailingOnly = TRUE)
universeFile = "blast2go_go_table_edit.txt"
interestingGenesFile = "top1percent_edit.txt"
output_file = "my_CC_output_file"
# load topGO
library("topGO")
# read in the 'gene universe' file
geneID2GO <- readMappings(file = universeFile)
geneUniverse <- names(geneID2GO)
library(shiny); runApp('GitHub/Brioche/shiny_test.R')
runApp('GitHub/Brioche/shiny_test.R')
runApp('GitHub/Brioche/shiny_test.R')
runApp('GitHub/Brioche/shiny_test.R')
runApp('GitHub/Brioche/shiny_test.R')
runApp('GitHub/Brioche/shiny_test.R')
runApp('GitHub/Brioche/shiny_test.R')
runApp('GitHub/Brioche/shiny_test.R')
runApp('GitHub/Brioche/shiny_test.R')
runApp('GitHub/Brioche/shiny_test.R')
runApp('GitHub/Brioche/shiny_test.R')
runApp('GitHub/Brioche/shiny_test.R')
runApp('GitHub/Brioche/shiny_test.R')
runApp('GitHub/Brioche/shiny_test.R')
# Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
fileInput("file1", "Choose CSV File",
accept = c(
"text/csv",
"text/comma-separated-values,text/plain",
".csv")
),
tags$hr(),
checkboxInput("header", "Header", TRUE)
),
mainPanel(
tableOutput("contents")
)
)
)
server <- function(input, output) {
output$contents <- renderTable({
# input$file1 will be NULL initially. After the user selects
# and uploads a file, it will be a data frame with 'name',
# 'size', 'type', and 'datapath' columns. The 'datapath'
# column will contain the local filenames where the data can
# be found.
inFile <- input$file1
if (is.null(inFile))
return(NULL)
read.csv(inFile$datapath, header = input$header)
})
}
shinyApp(ui, server)
}
runApp('GitHub/Brioche/shiny_test.R')
runApp('GitHub/Brioche/shiny_test.R')
runApp('GitHub/Brioche/shiny_test.R')
